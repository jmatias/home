#compdef _gotk gotk


function _gotk {
  local -a commands

  _arguments -C \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "bootstrap:Bootstrap toolkit components"
      "check:Check requirements and installation"
      "completion:Generates completion scripts for various shells"
      "create:Create or update sources and resources"
      "delete:Delete sources and resources"
      "export:Export resources in YAML format"
      "get:Get sources and resources"
      "help:Help about any command"
      "install:Install the toolkit components"
      "reconcile:Reconcile sources and resources"
      "resume:Resume suspended resources"
      "suspend:Suspend resources"
      "uninstall:Uninstall the toolkit components"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  bootstrap)
    _gotk_bootstrap
    ;;
  check)
    _gotk_check
    ;;
  completion)
    _gotk_completion
    ;;
  create)
    _gotk_create
    ;;
  delete)
    _gotk_delete
    ;;
  export)
    _gotk_export
    ;;
  get)
    _gotk_get
    ;;
  help)
    _gotk_help
    ;;
  install)
    _gotk_install
    ;;
  reconcile)
    _gotk_reconcile
    ;;
  resume)
    _gotk_resume
    ;;
  suspend)
    _gotk_suspend
    ;;
  uninstall)
    _gotk_uninstall
    ;;
  esac
}


function _gotk_bootstrap {
  local -a commands

  _arguments -C \
    '--arch[arch can be amd64 or arm64]:' \
    '--branch[default branch (for GitHub this must match the default branch setting for the organization)]:' \
    '*--components[list of components, accepts comma-separated values]:' \
    '--image-pull-secret[Kubernetes secret name used for pulling the toolkit images from a private registry]:' \
    '--log-level[set the controllers log level]:' \
    '--network-policy[deny ingress access to the toolkit controllers from other namespaces using network policies]' \
    '--registry[container registry where the toolkit images are published]:' \
    '(-v --version)'{-v,--version}'[toolkit version]:' \
    '--watch-all-namespaces[watch for custom resources in all namespaces, if set to false it will only watch the namespace where the toolkit is installed]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "github:Bootstrap toolkit components in a GitHub repository"
      "gitlab:Bootstrap toolkit components in a GitLab repository"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  github)
    _gotk_bootstrap_github
    ;;
  gitlab)
    _gotk_bootstrap_gitlab
    ;;
  esac
}

function _gotk_bootstrap_github {
  _arguments \
    '--hostname[GitHub hostname]:' \
    '--interval[sync interval]:' \
    '--owner[GitHub user or organization name]:' \
    '--path[repository path, when specified the cluster sync will be scoped to this path]:' \
    '--personal[is personal repository]' \
    '--private[is private repository]' \
    '--repository[GitHub repository name]:' \
    '*--team[GitHub team to be given maintainer access]:' \
    '--arch[arch can be amd64 or arm64]:' \
    '--branch[default branch (for GitHub this must match the default branch setting for the organization)]:' \
    '*--components[list of components, accepts comma-separated values]:' \
    '--image-pull-secret[Kubernetes secret name used for pulling the toolkit images from a private registry]:' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '--log-level[set the controllers log level]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--network-policy[deny ingress access to the toolkit controllers from other namespaces using network policies]' \
    '--registry[container registry where the toolkit images are published]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    '(-v --version)'{-v,--version}'[toolkit version]:' \
    '--watch-all-namespaces[watch for custom resources in all namespaces, if set to false it will only watch the namespace where the toolkit is installed]'
}

function _gotk_bootstrap_gitlab {
  _arguments \
    '--hostname[GitLab hostname]:' \
    '--interval[sync interval]:' \
    '--owner[GitLab user or group name]:' \
    '--path[repository path, when specified the cluster sync will be scoped to this path]:' \
    '--personal[is personal repository]' \
    '--private[is private repository]' \
    '--repository[GitLab repository name]:' \
    '--ssh-hostname[GitLab SSH hostname, defaults to hostname if not specified]:' \
    '--arch[arch can be amd64 or arm64]:' \
    '--branch[default branch (for GitHub this must match the default branch setting for the organization)]:' \
    '*--components[list of components, accepts comma-separated values]:' \
    '--image-pull-secret[Kubernetes secret name used for pulling the toolkit images from a private registry]:' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '--log-level[set the controllers log level]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--network-policy[deny ingress access to the toolkit controllers from other namespaces using network policies]' \
    '--registry[container registry where the toolkit images are published]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    '(-v --version)'{-v,--version}'[toolkit version]:' \
    '--watch-all-namespaces[watch for custom resources in all namespaces, if set to false it will only watch the namespace where the toolkit is installed]'
}

function _gotk_check {
  _arguments \
    '*--components[list of components, accepts comma-separated values]:' \
    '--pre[only run pre-installation checks]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_completion {
  local -a commands

  _arguments -C \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "bash:Generates bash completion scripts"
      "fish:Generates fish completion scripts"
      "powershell:Generates powershell completion scripts"
      "zsh:Generates zsh completion scripts"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  bash)
    _gotk_completion_bash
    ;;
  fish)
    _gotk_completion_fish
    ;;
  powershell)
    _gotk_completion_powershell
    ;;
  zsh)
    _gotk_completion_zsh
    ;;
  esac
}

function _gotk_completion_bash {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_completion_fish {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_completion_powershell {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_completion_zsh {
  _arguments \
    '(-h --help)'{-h,--help}'[help for zsh]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_create {
  local -a commands

  _arguments -C \
    '--export[export in YAML format to stdout]' \
    '--interval[source sync interval]:' \
    '*--label[set labels on the resource (can specify multiple labels with commas: label1=value1,label2=value2)]:' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "helmrelease:Create or update a HelmRelease resource"
      "kustomization:Create or update a Kustomization resource"
      "source:Create or update sources"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  helmrelease)
    _gotk_create_helmrelease
    ;;
  kustomization)
    _gotk_create_kustomization
    ;;
  source)
    _gotk_create_source
    ;;
  esac
}

function _gotk_create_helmrelease {
  _arguments \
    '--chart[Helm chart name or path]:' \
    '--chart-version[Helm chart version, accepts a semver range (ignored for charts from GitRepository sources)]:' \
    '*--depends-on[HelmReleases that must be ready before this release can be installed, supported formats '\''<name>'\'' and '\''<namespace>/<name>'\'']:' \
    '--release-name[name used for the Helm release, defaults to a composition of '\''[<target-namespace>-]<hr-name>'\'']:' \
    '--source[source that contains the chart (<kind>/<name>)]:' \
    '--target-namespace[namespace to install this release, defaults to the HelmRelease namespace]:' \
    '--values[local path to the values.yaml file]:' \
    '--export[export in YAML format to stdout]' \
    '--interval[source sync interval]:' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '*--label[set labels on the resource (can specify multiple labels with commas: label1=value1,label2=value2)]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_create_kustomization {
  _arguments \
    '--decryption-provider[enables secrets decryption, provider can be '\''sops'\'']:' \
    '--decryption-secret[set the Kubernetes secret name that contains the OpenPGP private keys used for sops decryption]:' \
    '*--depends-on[Kustomization that must be ready before this Kustomization can be applied, supported formats '\''<name>'\'' and '\''<namespace>/<name>'\'']:' \
    '*--health-check[workload to be included in the health assessment, in the format '\''<kind>/<name>.<namespace>'\'']:' \
    '--health-check-timeout[timeout of health checking operations]:' \
    '--path[path to the directory containing the Kustomization file]:' \
    '--prune[enable garbage collection]' \
    '--sa-name[service account name]:' \
    '--sa-namespace[service account namespace]:' \
    '--source[source that contains the Kubernetes manifests in the format '\''[<kind>/]<name>'\'', where kind can be GitRepository or Bucket, if kind is not specified it defaults to GitRepository]:' \
    '--validation[validate the manifests before applying them on the cluster, can be '\''client'\'' or '\''server'\'']:' \
    '--export[export in YAML format to stdout]' \
    '--interval[source sync interval]:' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '*--label[set labels on the resource (can specify multiple labels with commas: label1=value1,label2=value2)]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_create_source {
  local -a commands

  _arguments -C \
    '--export[export in YAML format to stdout]' \
    '--interval[source sync interval]:' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '*--label[set labels on the resource (can specify multiple labels with commas: label1=value1,label2=value2)]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "bucket:Create or update a Bucket source"
      "git:Create or update a GitRepository source"
      "helm:Create or update a HelmRepository source"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  bucket)
    _gotk_create_source_bucket
    ;;
  git)
    _gotk_create_source_git
    ;;
  helm)
    _gotk_create_source_helm
    ;;
  esac
}

function _gotk_create_source_bucket {
  _arguments \
    '--access-key[the bucket access key]:' \
    '--bucket-name[the bucket name]:' \
    '--endpoint[the bucket endpoint address]:' \
    '--insecure[for when connecting to a non-TLS S3 HTTP endpoint]' \
    '--provider[the S3 compatible storage provider name, can be '\''generic'\'' or '\''aws'\'']:' \
    '--region[the bucket region]:' \
    '--secret-key[the bucket secret key]:' \
    '--export[export in YAML format to stdout]' \
    '--interval[source sync interval]:' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '*--label[set labels on the resource (can specify multiple labels with commas: label1=value1,label2=value2)]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_create_source_git {
  _arguments \
    '--branch[git branch]:' \
    '(-p --password)'{-p,--password}'[basic authentication password]:' \
    '--ssh-ecdsa-curve[SSH ECDSA public key curve (p256, p384, p521)]:' \
    '--ssh-key-algorithm[SSH public key algorithm (rsa, ecdsa, ed25519)]:' \
    '--ssh-rsa-bits[SSH RSA public key bit size (multiplies of 8)]:' \
    '--tag[git tag]:' \
    '--tag-semver[git tag semver range]:' \
    '--url[git address, e.g. ssh://git@host/org/repository]:' \
    '(-u --username)'{-u,--username}'[basic authentication username]:' \
    '--export[export in YAML format to stdout]' \
    '--interval[source sync interval]:' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '*--label[set labels on the resource (can specify multiple labels with commas: label1=value1,label2=value2)]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_create_source_helm {
  _arguments \
    '--ca-file[TLS authentication CA file path]:' \
    '--cert-file[TLS authentication cert file path]:' \
    '--key-file[TLS authentication key file path]:' \
    '(-p --password)'{-p,--password}'[basic authentication password]:' \
    '--url[Helm repository address]:' \
    '(-u --username)'{-u,--username}'[basic authentication username]:' \
    '--export[export in YAML format to stdout]' \
    '--interval[source sync interval]:' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '*--label[set labels on the resource (can specify multiple labels with commas: label1=value1,label2=value2)]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_delete {
  local -a commands

  _arguments -C \
    '(-s --silent)'{-s,--silent}'[delete resource without asking for confirmation]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "helmrelease:Delete a HelmRelease resource"
      "kustomization:Delete a Kustomization resource"
      "source:Delete sources"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  helmrelease)
    _gotk_delete_helmrelease
    ;;
  kustomization)
    _gotk_delete_kustomization
    ;;
  source)
    _gotk_delete_source
    ;;
  esac
}

function _gotk_delete_helmrelease {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '(-s --silent)'{-s,--silent}'[delete resource without asking for confirmation]' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_delete_kustomization {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '(-s --silent)'{-s,--silent}'[delete resource without asking for confirmation]' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_delete_source {
  local -a commands

  _arguments -C \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '(-s --silent)'{-s,--silent}'[delete resource without asking for confirmation]' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "bucket:Delete a Bucket source"
      "git:Delete a GitRepository source"
      "helm:Delete a HelmRepository source"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  bucket)
    _gotk_delete_source_bucket
    ;;
  git)
    _gotk_delete_source_git
    ;;
  helm)
    _gotk_delete_source_helm
    ;;
  esac
}

function _gotk_delete_source_bucket {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '(-s --silent)'{-s,--silent}'[delete resource without asking for confirmation]' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_delete_source_git {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '(-s --silent)'{-s,--silent}'[delete resource without asking for confirmation]' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_delete_source_helm {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '(-s --silent)'{-s,--silent}'[delete resource without asking for confirmation]' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_export {
  local -a commands

  _arguments -C \
    '--all[select all resources]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "helmrelease:Export HelmRelease resources in YAML format"
      "kustomization:Export Kustomization resources in YAML format"
      "source:Export sources"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  helmrelease)
    _gotk_export_helmrelease
    ;;
  kustomization)
    _gotk_export_kustomization
    ;;
  source)
    _gotk_export_source
    ;;
  esac
}

function _gotk_export_helmrelease {
  _arguments \
    '--all[select all resources]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_export_kustomization {
  _arguments \
    '--all[select all resources]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_export_source {
  local -a commands

  _arguments -C \
    '--with-credentials[include credential secrets]' \
    '--all[select all resources]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "bucket:Export Bucket sources in YAML format"
      "git:Export GitRepository sources in YAML format"
      "helm:Export HelmRepository sources in YAML format"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  bucket)
    _gotk_export_source_bucket
    ;;
  git)
    _gotk_export_source_git
    ;;
  helm)
    _gotk_export_source_helm
    ;;
  esac
}

function _gotk_export_source_bucket {
  _arguments \
    '--all[select all resources]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    '--with-credentials[include credential secrets]'
}

function _gotk_export_source_git {
  _arguments \
    '--all[select all resources]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    '--with-credentials[include credential secrets]'
}

function _gotk_export_source_helm {
  _arguments \
    '--all[select all resources]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    '--with-credentials[include credential secrets]'
}


function _gotk_get {
  local -a commands

  _arguments -C \
    '(-A --all-namespaces)'{-A,--all-namespaces}'[list the requested object(s) across all namespaces]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "helmreleases:Get HelmRelease statuses"
      "kustomizations:Get Kustomization statuses"
      "sources:Get source statuses"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  helmreleases)
    _gotk_get_helmreleases
    ;;
  kustomizations)
    _gotk_get_kustomizations
    ;;
  sources)
    _gotk_get_sources
    ;;
  esac
}

function _gotk_get_helmreleases {
  _arguments \
    '(-A --all-namespaces)'{-A,--all-namespaces}'[list the requested object(s) across all namespaces]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_get_kustomizations {
  _arguments \
    '(-A --all-namespaces)'{-A,--all-namespaces}'[list the requested object(s) across all namespaces]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_get_sources {
  local -a commands

  _arguments -C \
    '(-A --all-namespaces)'{-A,--all-namespaces}'[list the requested object(s) across all namespaces]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "bucket:Get Bucket source statuses"
      "git:Get GitRepository source statuses"
      "helm:Get HelmRepository source statuses"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  bucket)
    _gotk_get_sources_bucket
    ;;
  git)
    _gotk_get_sources_git
    ;;
  helm)
    _gotk_get_sources_helm
    ;;
  esac
}

function _gotk_get_sources_bucket {
  _arguments \
    '(-A --all-namespaces)'{-A,--all-namespaces}'[list the requested object(s) across all namespaces]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_get_sources_git {
  _arguments \
    '(-A --all-namespaces)'{-A,--all-namespaces}'[list the requested object(s) across all namespaces]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_get_sources_helm {
  _arguments \
    '(-A --all-namespaces)'{-A,--all-namespaces}'[list the requested object(s) across all namespaces]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_help {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_install {
  _arguments \
    '--arch[arch can be amd64 or arm64]:' \
    '*--components[list of components, accepts comma-separated values]:' \
    '--dry-run[only print the object that would be applied]' \
    '--export[write the install manifests to stdout and exit]' \
    '--image-pull-secret[Kubernetes secret name used for pulling the toolkit images from a private registry]:' \
    '--log-level[set the controllers log level]:' \
    '--network-policy[deny ingress access to the toolkit controllers from other namespaces using network policies]' \
    '--registry[container registry where the toolkit images are published]:' \
    '(-v --version)'{-v,--version}'[toolkit version]:' \
    '--watch-all-namespaces[watch for custom resources in all namespaces, if set to false it will only watch the namespace where the toolkit is installed]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_reconcile {
  local -a commands

  _arguments -C \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "helmrelease:Reconcile a HelmRelease resource"
      "kustomization:Reconcile a Kustomization resource"
      "source:Reconcile sources"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  helmrelease)
    _gotk_reconcile_helmrelease
    ;;
  kustomization)
    _gotk_reconcile_kustomization
    ;;
  source)
    _gotk_reconcile_source
    ;;
  esac
}

function _gotk_reconcile_helmrelease {
  _arguments \
    '--with-source[reconcile HelmRelease source]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_reconcile_kustomization {
  _arguments \
    '--with-source[reconcile kustomization source]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_reconcile_source {
  local -a commands

  _arguments -C \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "bucket:Reconcile a Bucket source"
      "git:Reconcile a GitRepository source"
      "helm:Reconcile a HelmRepository source"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  bucket)
    _gotk_reconcile_source_bucket
    ;;
  git)
    _gotk_reconcile_source_git
    ;;
  helm)
    _gotk_reconcile_source_helm
    ;;
  esac
}

function _gotk_reconcile_source_bucket {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_reconcile_source_git {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_reconcile_source_helm {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_resume {
  local -a commands

  _arguments -C \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "helmrelease:Resume a suspended HelmRelease"
      "kustomization:Resume a suspended Kustomization"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  helmrelease)
    _gotk_resume_helmrelease
    ;;
  kustomization)
    _gotk_resume_kustomization
    ;;
  esac
}

function _gotk_resume_helmrelease {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_resume_kustomization {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}


function _gotk_suspend {
  local -a commands

  _arguments -C \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "helmrelease:Suspend reconciliation of HelmRelease"
      "kustomization:Suspend reconciliation of Kustomization"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  helmrelease)
    _gotk_suspend_helmrelease
    ;;
  kustomization)
    _gotk_suspend_kustomization
    ;;
  esac
}

function _gotk_suspend_helmrelease {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_suspend_kustomization {
  _arguments \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

function _gotk_uninstall {
  _arguments \
    '--crds[removes all CRDs previously installed]' \
    '--dry-run[only print the object that would be deleted]' \
    '--resources[removes custom resources such as Kustomizations, GitRepositories and HelmRepositories]' \
    '(-s --silent)'{-s,--silent}'[delete components without asking for confirmation]' \
    '--kubeconfig[path to the kubeconfig file]:' \
    '(-n --namespace)'{-n,--namespace}'[the namespace scope for this operation]:' \
    '--timeout[timeout for this operation]:' \
    '--verbose[print generated objects]'
}

