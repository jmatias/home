# vim: ft=sh sw=2 ts=2 expandtab
SUBCOMMAND_DESC="Utility for maintain copies of '${MAIN_COMMAND}'"
SUBCOMMAND_HELP=$(cat <<EOH

Note: NAME is optional as long is definedin in 'twin/config',
if not defined there it will be required.

update [NAME] [-f]        Will copy all files in:
                          ${SUBCOMMANDS_DIR}
                          and
                          ${CONFIGURATION_DIR}
                          to the same directories defined for the twin
                          tool defined by NAME. Unless '-f' is given
                          this command won't overwrite any files.

create DIR [NAME]         This will create a twin (a copy of this tool)
                          which you can extend and change it.

status [NAME]             Check how files compare between this tool
                          and NAME tool.

diff FILE [NAME]          Run vimdiff on FILE for this tool and NAME.

copy FILE [NAME]          Copy a single FILE copy from this tool to
                          NAME.

EOH
)

load_conf "config"

function _check_env() {
    local name="${1}"

    local w_dir="${name^^}_WORKING_DIR"
    local c_dir="${name^^}_CONF_DIR"
    local s_dir="${name^^}_SUBCMD_DIR"

    # override if specific dir was given
    log "check if ${c_dir} and/or ${s_dir} are defined"
    [[ -d "${c_dir}" ]] && local -g CNF_DIR="${!c_dir}"
    [[ -d "${s_dir}" ]] && local -g SUB_DIR="${!s_dir}"

    # use working dir for any non defined directory
    log "fallback to ${w_dir} if needed"
    if [[ -d "${!w_dir}" ]]; then
      log "${w_dir}=${!w_dir} defined"
      [[ -z ${CNF_DIR} ]] && local -g CNF_DIR="${!w_dir}/conf"
      [[ -z ${SUB_DIR} ]] && local -g SUB_DIR="${!w_dir}/${name,,}.d"
    fi

    # fail if could not figure out working directories
    if [[ ! -d ${CNF_DIR} || ! -d ${SUB_DIR} ]]; then
      error "Env variables ${s_dir} and ${c_dir} must be defined.\n"
    fi

}

function _check_diff_in_dir() {
  local source_dir="${1}"
  local target_dir="${2}"

  local base_source_dir=$(basename ${source_dir})
  local base_target_dir=$(basename ${target_dir})

  while read line; do
    f=${line#${source_dir}/}
    diff --brief ${source_dir}/${f} ${target_dir}/${f} &> /dev/null \
      && with_dots_between "${f}" "$(green_box 'SAME' )"  \
      || with_dots_between "${f}" "$(red_box 'DIFF' )"

  done <<< $(find ${source_dir} -type f)
}

case ${1} in
  copy)
    file_name="${2?'missing which FILE to copy'}"
    twin_name="${3-${config['name']}}"
    [[ -n ${twin_name} ]] || error "NAME not found in twin/conf or given as argument"

    log "check env for ${twin_name}"
    _check_env "${twin_name}"

    if [[ -f ${SUBCOMMANDS_DIR}/${file_name} ]]; then
      log "file ${file_name} exists in ${SUBCOMMANDS_DIR}"
      cp -fv ${SUBCOMMANDS_DIR}/${file_name} ${SUB_DIR}/${file_name}
    elif [[ -f ${CONFIGURATION_DIR}/${file_name} ]]; then
      log "file ${file_name} exists in ${CONFIGURATION_DIR}"
      cp -fv ${CONFIGURATION_DIR}/${file_name} ${CNF_DIR}/${file_name}
    else
      error "${file_name} not found in ${SUBCOMMANDS_DIR} or ${CONFIGURATION_DIR}"
    fi
  ;;
  diff)
    file_name="${2?'missing which file to diff'}"
    twin_name="${3-${config['name']}}"
    [[ -n ${twin_name} ]] || error "NAME not found in twin/conf or given as argument"

    _check_env "${twin_name}"
    if [[ -f ${SUBCOMMANDS_DIR}/${file_name} ]]; then
      vimdiff ${SUBCOMMANDS_DIR}/${file_name} ${SUB_DIR}/${file_name}
    elif [[ -f ${CONFIGURATION_DIR}/${file_name} ]]; then
      vimdiff ${CONFIGURATION_DIR}/${file_name} ${CND_DIR}/${file_name}
    else
      error "${file_name} not found in ${SUBCOMMANDS_DIR} or ${CONFIGURATION_DIR}"
    fi
  ;;
  status)
    twin_name="${2-${config['name']}}"
    [[ -n ${twin_name} ]] || error "NAME not found in twin/conf or given as argument"
    _check_env "${twin_name}"

    in_cyan "Checking configurations:\n"
    _check_diff_in_dir "${CONFIGURATION_DIR}" "${CNF_DIR}"

    in_cyan "\nChecking subcommands:\n"
    _check_diff_in_dir "${SUBCOMMANDS_DIR}"   "${SUB_DIR}"
  ;;
  update)
    twin_name="${2-${config['name']}}"
    [[ -n ${twin_name} ]] || error "NAME not found in twin/conf or given as argument"
    _check_env "${twin_name}"

    in_cyan "Updating twin '${twin_name}' command files. \
      Use '-f' after NAME to force overwrite of files.\n"

    # do not force overwrite files by default
    [[ ${3:-""} == "-f" ]] && cp_flags="-Rv" || cp_flags="-nRv"

    in_cyan "Copying files into twin configuration directory\n"
    cp ${cp_flags} "${CONFIGURATION_DIR}/" "${CNF_DIR}/"

    in_cyan "\nCopying files into twin subcommands directory\n"
    cp ${cp_flags} "${SUBCOMMANDS_DIR}/"   "${SUB_DIR}/"
  ;;
  create)
    twin_dir="${2?'missing twin command DIR parameter'}"
    [[ ! -d "${twin_dir}" ]] \
      && error "'${twin_dir}' must be a directory.\n"

    twin_name="${3-${config['name']}}"
    [[ -n ${twin_name} ]] || error "NAME not found in twin/conf or given as argument"

    twin_name="${twin_name,,}" # make it lowercase
    in_cyan "Creating '${twin_name}' as twin copy of this tool\n"

    twin_project_dir="${twin_dir%/}/${twin_name}"
    log "project dir set as: ${twin_project_dir}"
    [[ -d "${twin_project_dir}" ]] \
      && error "${twin_project_dir} already exists, use 'twin update' instead\n"

    twin_subcmd_dir="${twin_project_dir}/${twin_name}.d"
    twin_config_dir="${twin_project_dir}/conf"
    log "subcmd dir set as: ${twin_subcmd_dir}"
    log "config dir set as: ${twin_config_dir}"

    in_cyan "Creating directory: ${twin_project_dir}\n"
    mkdir "${twin_project_dir}"
    in_cyan "Creating subcmd directory: ${twin_subcmd_dir}\n"
    mkdir "${twin_subcmd_dir}"
    in_cyan "Creating configuration directory: ${twin_config_dir}\n"
    mkdir "${twin_config_dir}"

    in_cyan "Creating symbolic link from '${MAIN_COMMAND}' to '${twin_name}'\n"
    ln -s "${ROOT_DIR}/${MAIN_COMMAND}" "${twin_project_dir}/${twin_name}"

    in_cyan "Exporting configuration environment variables for '${twin_name}'\n"
    export "${twin_name^^}_CONF_DIR=${twin_config_dir}"
    export "${twin_name^^}_SUBCMD_DIR=${twin_subcmd_dir}"

    in_cyan "Running update on '${twin_name}'\n"
    log "about to call: ${MAIN_COMMAND} ${SUBCOMMAND} update ${twin_name}"
    ${MAIN_COMMAND} ${SUBCOMMAND} update ${twin_name}

    in_green "${twin_name} setup finished.\n"
  ;;
esac
