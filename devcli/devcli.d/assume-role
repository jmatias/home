#!/bin/bash

SUBCOMMAND_DESC="Assume an AWS IAM role."
SUBCOMMAND_HELP=$(
  cat <<EOH

client                      Connect to the client's AWS account.
tw                           Connect to ThoughtWorks' AWS account.
personal                     Connect to my personal AWS account.
time-left                    Print the time remaining in the current assume-role session.

EOH
)

case ${1} in

time-left)

  expiration="$(aws configure get expiration)"
  [[ -z $expiration ]] && exit 1

  secondsRemaining=$(($expiration - $(date -u +%s) - 3))
  date -u -d "@$secondsRemaining" +'%Hh %Mm %Ss'
  [[ $secondsRemaining -le 0 ]] && exit 1
  exit 0
  ;;


#     ____  _  _               _                                           _   
#    / ___|| |(_)  ___  _ __  | |_    __ _   ___  ___  ___   _   _  _ __  | |_ 
#   | |    | || | / _ \| '_ \ | __|  / _` | / __|/ __|/ _ \ | | | || '_ \ | __|
#   | |___ | || ||  __/| | | || |_  | (_| || (__| (__| (_) || |_| || | | || |_ 
#    \____||_||_| \___||_| |_| \__|  \__,_| \___|\___|\___/  \__,_||_| |_| \__|
#                                                                              


client)

  set -e

  echo MFA Arn: $(aws configure get serial-number --profile client)
  echo -n "MFA code: "
  read -s code
  echo

  source $HOME/.env3/bin/activate

  temp_role=$(aws --profile ${1} sts assume-role --serial-number $(aws configure get serial-number --profile client) \
    --role-arn $(aws configure get role-arn --profile client) --token-code $code \
    --role-session-name AssumedRole --duration-seconds 3600)

  in_green "Assumed admin role.\n"

  access_key=$(echo $temp_role | jq -r .Credentials.AccessKeyId)
  secret=$(echo $temp_role | jq -r .Credentials.SecretAccessKey)
  token=$(echo $temp_role | jq -r .Credentials.SessionToken)

  if __ubuntu; then
    date_command="date"
  else
    date_command="gdate"
  fi

  expiration=$(echo $temp_role | jq -r .Credentials.Expiration | xargs -I{} $date_command -d {} +%s)
  in_gray "Expires: $(echo $temp_role | jq -r .Credentials.Expiration | xargs -I{} $date_command -d {}) \n"
  aws configure set expiration $expiration --profile clientmfa


  aws configure set aws_session_token $token --profile clientmfa
  aws configure set aws_secret_access_key $secret --profile clientmfa
  aws configure set aws_access_key_id $access_key --profile clientmfa
  aws configure set region us-east-1 --profile clientmfa

  aws ecr get-login-password --region "$(aws configure get region --profile client)" --profile clientmfa | docker login \
  --username AWS --password-stdin "$(aws configure get account-number --profile client)".dkr.ecr.us-east-1.amazonaws.com

  ;;



#    _____  _                           _      _  __        __            _         
#   |_   _|| |__    ___   _   _   __ _ | |__  | |_\ \      / /___   _ __ | | __ ___ 
#     | |  | '_ \  / _ \ | | | | / _` || '_ \ | __|\ \ /\ / // _ \ | '__|| |/ // __|
#     | |  | | | || (_) || |_| || (_| || | | || |_  \ V  V /| (_) || |   |   < \__ \
#     |_|  |_| |_| \___/  \__,_| \__, ||_| |_| \__|  \_/\_/  \___/ |_|   |_|\_\|___/
#                                |___/                                              


tw)

  set -e

  source $ROOT_DIR/.env3/bin/activate
  saml=$(oktaauth --username $(aws configure get username --profile tw)  \
    -s  $(aws configure get server --profile tw) --apptype amazon_aws \
    --appid $(aws configure get tw-app-id --profile tw))

  if [ $? -ne 0 ]; then
    error "Could not authenticate through Okta."
    exit 1
  fi

  in_green "\n\nAuthenticated via Okta.\n"

  echo "$saml" | aws_role_credentials saml --profile tw >/dev/null 2>&1

  if [ $? -ne 0 ]; then
    error "Could not assume role."
    exit 1
  fi

  in_green "Assumed admin federated-admin role.\n"
  expiration=$(($(date +%s) + 3585))
  aws configure set expiration $expiration --profile tw
  in_gray "Expires: $(echo $expiration | xargs -I{} date -d @{}) \n"

  ;;


#    ____                                        _                                         _   
#   |  _ \  ___  _ __  ___   ___   _ __    __ _ | |   __ _   ___  ___  ___   _   _  _ __  | |_ 
#   | |_) |/ _ \| '__|/ __| / _ \ | '_ \  / _` || |  / _` | / __|/ __|/ _ \ | | | || '_ \ | __|
#   |  __/|  __/| |   \__ \| (_) || | | || (_| || | | (_| || (__| (__| (_) || |_| || | | || |_ 
#   |_|    \___||_|   |___/ \___/ |_| |_| \__,_||_|  \__,_| \___|\___|\___/  \__,_||_| |_| \__|
#                                                                                              


  personal)
  echo "Not implemented."
  ;;
esac
