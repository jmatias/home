#!/usr/bin/env bash


SUBCOMMAND_DESC="Assume an AWS IAM role."
SUBCOMMAND_HELP=$(
  cat <<EOH

***REMOVED***                      Connect to Trilogy's AWS account.
tw                           Connect to ThoughtWorks' AWS account.
personal                     Connect to my personal AWS account.
install-deps                 Install dependencies.
time-left                    Print the time remaining in the current assume-role session.

EOH
)

case ${1} in

install-dependencies)

  mypwd=$PWD
  set -e
  clean_up() {
    ARG=$?
    echo "> clean_up"
    rm -rf /tmp/aws_role_credentials
    rm -rf /tmp/oktaauth
    cd $mypwd
    exit $ARG
  }
  trap clean_up EXIT

  python3 -m venv $ROOT_DIR/.env3
  source $ROOT_DIR/.env3/bin/activate
  pip install --upgrade pip

  rm -rf /tmp/aws_role_credentials
  rm -rf /tmp/oktaauth

  git clone git@github.com:MatthiasScholzTW/aws_role_credentials.git /tmp/aws_role_credentials
  git clone git@github.com:MatthiasScholzTW/oktaauth.git /tmp/oktaauth

  cd /tmp/aws_role_credentials
  python setup.py install
  cd /tmp/oktaauth
  python setup.py install

  ;;

time-left)

  secondsRemaining=$(($(aws configure get expiration) - $(date -u +%s) - 3))
  date -u -d "@$secondsRemaining" +'%Hh %Mm %Ss'
  if [ $secondsRemaining -ge 0 ]; then
    exit 0
  else
    exit 1
  fi

  ;;

***REMOVED***)

  set -e

  mfaArn=$(<${CONFIGURATION_DIR}/secrets/assume-role/***REMOVED***/mfa-arn)
  roleArn=$(<${CONFIGURATION_DIR}/secrets/assume-role/***REMOVED***/role-arn)

  echo MFA Arn: $mfaArn

  export AWS_PROFILE=***REMOVED***

  echo -n "MFA code: "
  while IFS= read -p "$prompt" -r -s -n 1 char
  do
      if [[ $char == $'\0' ]]
      then
          break
      fi
      prompt='*'
      code+="$char"
  done
  echo

  source $ROOT_DIR/.env3/bin/activate

  temp_role=$(aws --profile ${1} sts assume-role --serial-number $mfaArn --role-arn $roleArn --token-code $code \
    --role-session-name AssumedRole --duration-seconds 3600)

  in_green "Assumed admin role.\n"

  expiration=$(echo $temp_role | jq -r .Credentials.Expiration | xargs -I{} date -d {} +%s)
  access_key=$(echo $temp_role | jq -r .Credentials.AccessKeyId)
  secret=$(echo $temp_role | jq -r .Credentials.SecretAccessKey)
  token=$(echo $temp_role | jq -r .Credentials.SessionToken)

  in_gray "Expires: $(echo $temp_role | jq -r .Credentials.Expiration | xargs -I{} date -d {}) \n"

  aws configure set aws_session_token $token --profile ***REMOVED***mfa
  aws configure set aws_secret_access_key $secret --profile ***REMOVED***mfa
  aws configure set aws_access_key_id $access_key --profile ***REMOVED***mfa
  aws configure set region us-east-1 --profile ***REMOVED***mfa
  aws configure set expiration $expiration --profile ***REMOVED***mfa

  ;;

tw)

  export AWS_PROFILE=tw

  source $ROOT_DIR/.env3/bin/activate
  saml=$(oktaauth --username ***REMOVED***@thoughtworks.com -s thoughtworks.okta.com \
    --apptype amazon_aws --appid $TW_AWS_APP_ID)

  retVal=$?
  if [ $retVal -ne 0 ]; then
    error "Could not authenticate through Okta."
    exit $retVal
  fi

  in_green "\n\nAuthenticated via Okta.\n"

  echo $saml | aws_role_credentials saml --profile tw >/dev/null 2>&1

  retVal=$?
  if [ $retVal -ne 0 ]; then
    error "Could not assume role."
    exit $retVal
  fi

  in_green "Assumed admin federated-admin role.\n"

  temp_role=$(aws sts assume-role --role-arn $TW_CLIADMINROLE_ARN --role-session-name "AssumedRole")
  expiration=$(echo $temp_role | jq -r .Credentials.Expiration | xargs -I{} date -d {} +%s)
  access_key=$(echo $temp_role | jq -r .Credentials.AccessKeyId)
  secret=$(echo $temp_role | jq -r .Credentials.SecretAccessKey)
  token=$(echo $temp_role | jq -r .Credentials.SessionToken)

  in_gray "Expires: $(echo $temp_role | jq -r .Credentials.Expiration | xargs -I{} date -d {}) \n"

  aws configure set aws_session_token $token --profile twmfa
  aws configure set aws_secret_access_key $secret --profile twmfa
  aws configure set aws_access_key_id $access_key --profile twmfa
  aws configure set region us-east-1 --profile twmfa
  aws configure set expiration $expiration --profile twmfa

  ;;

personal)
  echo "Hello World!"
  ;;
esac
